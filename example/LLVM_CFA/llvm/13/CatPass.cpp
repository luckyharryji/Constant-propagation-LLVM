#include "llvm/Pass.h"
#include "llvm/IR/Function.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/IR/LegacyPassManager.h"
#include "llvm/Transforms/IPO/PassManagerBuilder.h"
#include "llvm/ADT/Statistic.h"
#include "llvm/IR/Module.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/BasicBlock.h"
#include "llvm/IR/Instructions.h"
#include "llvm/IR/IRBuilder.h"
#include "llvm/Pass.h"
#include "llvm/Support/raw_ostream.h"
#include <iostream>
#include <map>
#include <vector>
#include <assert.h>

using namespace llvm;
using namespace std;

namespace {
  struct CAT : public FunctionPass {
    static char ID; 
    Module *currentModule;

    CAT() : FunctionPass(ID) {}

    bool doInitialization (Module &M) override {
      currentModule = &M;
      return false;
    }

    bool runOnFunction (Function &F) override {
      vector<Instruction *> toDelete;
      bool modified = false;
      errs() << "CATPass: Start\n";
      for (auto& B : F) {
        for (auto& I : B) {
          if (auto* call = dyn_cast<CallInst>(&I)) {
            Function *callee;

            // This creates the object responsible to change the code, which is going to add new instructions just before "call"
            IRBuilder<> builder(call);

            // Get the function called
            callee = call->getCalledFunction();

            // Check if the callee is the function' sqrt'
            if (currentModule->getFunction("sqrt") != callee){
              continue ;
            }
            errs() << "CATPass:   Found a call instruction to \"sqrt\"\n" ;

            // Create a constant that will be used to approximate 'sqrt'
            Value *constValue = ConstantFP::get(currentModule->getContext(), APFloat(0.3));

            // Get the input value
            Value *inputValue = call->getArgOperand(0);

            // Compute the fraction of the input value we'll remove from it
            Value *mul = builder.CreateFMul(inputValue, constValue);

            // Remove a fraction of the input value
            Value *sub = builder.CreateFSub(inputValue, mul);

            // Add a constant value to avoid going below a threshold
            Value *const1Value = ConstantFP::get(currentModule->getContext(), APFloat(0.5));
            Value *add = builder.CreateFAdd(sub, const1Value);

            // Replace every use of the value generated by the call instruction with the result of the add instruction
            call->replaceAllUsesWith(add);

            // Remove the call to 'sqrt'
            toDelete.push_back(call);

            // Keep track of changes
            modified = true;
          }
        }
      }

      // Delete calls to 'sqrt'
      for (auto I : toDelete) {
        I->eraseFromParent();
      }

      // Free the memory
      toDelete.clear();

      errs() << "CATPass: End\n" ;
      return modified;
    }

    void getAnalysisUsage(AnalysisUsage &AU) const override {
    }
  };
}

// Next there is code to register your pass to "opt"
char CAT::ID = 0;
static RegisterPass<CAT> X("CAT", "Homework for the CAT class");

// Next there is code to register your pass to "clang"
static CAT * _PassMaker = NULL;
static RegisterStandardPasses _RegPass1(PassManagerBuilder::EP_OptimizerLast,
    [](const PassManagerBuilder&, legacy::PassManagerBase& PM) {
        if(!_PassMaker){ PM.add(_PassMaker = new CAT());}}); // ** for -Ox
static RegisterStandardPasses _RegPass2(PassManagerBuilder::EP_EnabledOnOptLevel0,
    [](const PassManagerBuilder&, legacy::PassManagerBase& PM) {
        if(!_PassMaker){ PM.add(_PassMaker = new CAT()); }}); // ** for -O0
